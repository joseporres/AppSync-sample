AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  Prueba de CRUD

Parameters:
  SENDER:
    Description: Ambiente despliegue
    Type: String
    Default: jose.porres@devmente.com  

Resources:
 ###################
 ## AppSync Role  ##
 ###################
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowAccessForAppsyncResolvers
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - states:StartSyncExecution
                Resource:
                  - !Ref StoreSettingsStateMachine
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !GetAtt DynamoSettingTableSample.Arn
                  - !Sub 
                    - "${Table}/index/*"
                    - { Table: !GetAtt DynamoSettingTableSample.Arn }
              # - Effect: Allow
              #   Action:
              #   - lambda:invokeFunction
              #   Resource: 
              #     - !GetAtt PlusTenFunction.Arn
  
  UserPoolTest:
    Type: "AWS::Cognito::UserPool"
    Description: "A Cognito user pool for authenticating users"
    Properties:
      UserPoolName: pool_test
      UsernameAttributes: [email]
      # AutoVerifiedAttributes:
      #   - phone_number
      MfaConfiguration: "OFF"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: nombre
          AttributeDataType: String
          Mutable: true
          Required: false

  UserPoolClientTest:
    Type: "AWS::Cognito::UserPoolClient"
    Description: "App Client used by AWS AppSync"
    Properties:
      ClientName: ofvi-appsync-client-test
      GenerateSecret: false
      UserPoolId: !Ref UserPoolTest

      
  AppSyncApi:
    DependsOn: AppSyncServiceRole
    Type: AWS::AppSync::GraphQLApi
    Description: "The GraphQL API for the single table App"
    Properties:
      Name: university-appsync
      AuthenticationType: API_KEY


   # API Key for external access
  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties: 
      ApiId: !GetAtt AppSyncApi.ApiId

 # AppSync Schema
  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DefinitionS3Location: "./schema.graphql"


  # STEPFUNCTION PRACTICE
  StepFunctionsHttpDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: StepFunctionsHttpDataSource
      Description: Step Functions HTTP
      Type: HTTP
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      HttpConfig:
        Endpoint: !Sub https://sync-states.${AWS::Region}.amazonaws.com/
        AuthorizationConfig:
          AuthorizationType: AWS_IAM
          AwsIamConfig:
            SigningRegion: !Ref AWS::Region
            SigningServiceName: states

   # AppSync Data Source for DynamoDB Settings
  AppSyncDynamoSettingsTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: SettingsTableDataSource
      ApiId: !GetAtt AppSyncApi.ApiId
      Description: "Settings table data source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Ref DynamoSettingTableSample
        AwsRegion: !Sub ${AWS::Region}
  
  CheckEmailUserTypeFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: handler
      Runtime: go1.x
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          BucketName: !Ref TemplateBucket
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref TemplateBucket

  StoreSettingsFunction:         
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: handler
      Runtime: go1.x
      Policies: 
          - DynamoDBCrudPolicy:
              TableName: !Ref DynamoSettingTableSample
      Environment:
        Variables:
          TableName: !Ref DynamoSettingTableSample

  UpdateForceStatus:         
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: handler
      Runtime: go1.x
      Policies: 
          - DynamoDBCrudPolicy:
              TableName: !Ref DynamoSettingTableSample
      Environment:
        Variables:
          TableName: !Ref DynamoSettingTableSample
  
  SendTemporalPassword:         
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: handler
      Runtime: go1.x
      Policies: 
          - DynamoDBCrudPolicy:
              TableName: !Ref DynamoSettingTableSample
          - S3ReadPolicy:
              BucketName: !Ref TemplateBucket
      Environment:
        Variables:
          TableName: !Ref DynamoSettingTableSample
          BucketName: !Ref TemplateBucket

  
  


  
  GetInvitationTemplateFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: handler
      Runtime: go1.x
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          BucketName: !Ref TemplateBucket
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref TemplateBucket
      
  SendInvitationFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: handler
      Runtime: go1.x
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          SENDER: !Ref SENDER
      Policies:
        - AWSLambdaBasicExecutionRole   
        - Statement:
          - Sid: SESPolicy
            Effect: Allow
            Action:
              - ses:SendEmail
            Resource: '*'

  CreateAppsProcessFunction:         
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: handler
      Runtime: go1.x
      Policies: 
          - DynamoDBCrudPolicy:
              TableName: !Ref DynamoSettingTableSample
      Environment:
        Variables:
          TABLENAME: !Ref DynamoSettingTableSample 
  

  StoreSettingsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: storeSettings
      DataSourceName: !GetAtt StepFunctionsHttpDataSource.Name
      RequestMappingTemplate: !Sub >
        {
          "version": "2018-05-29",
          "method": "POST",
          "resourcePath": "/",
          "params": {
            "headers": {
              "content-type": "application/x-amz-json-1.0",
              "x-amz-target":"AWSStepFunctions.StartSyncExecution"
            },
            "body": {
              "stateMachineArn": "${StoreSettingsStateMachine}",
              "input": "{ \"settings\": $util.escapeJavaScript($util.toJson($ctx.args.settings))}"
            }
          }
        }
      ResponseMappingTemplate: $ctx.result.body
  

  StoreSettingsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachines/storeSettings.asl.json
      Type: EXPRESS
      DefinitionSubstitutions:
        DDBQuery: arn:aws:states:::aws-sdk:dynamodb:query     
        DDBUpdateItem: arn:aws:states:::dynamodb:updateItem  
        CheckEmailUserTypeFunctionArn : !GetAtt CheckEmailUserTypeFunction.Arn              
        StoreSettingsFunctionArn : !GetAtt StoreSettingsFunction.Arn 
        GetInvitationTemplateFunctionArn : !GetAtt GetInvitationTemplateFunction.Arn
        SendInvitationFunctionArn : !GetAtt SendInvitationFunction.Arn
        GetAndSendInvitationStateMachineArn: !GetAtt GetAndSendInvitationStateMachine.Arn
        TableName: !Ref DynamoSettingTableSample
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt CreateSettingsLogs.Arn
        IncludeExecutionData: true
        Level: ALL  
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoSettingTableSample 
        - LambdaInvokePolicy:
            FunctionName: !Ref StoreSettingsFunction
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt GetAndSendInvitationStateMachine.Name
        - LambdaInvokePolicy:
            FunctionName: !Ref CheckEmailUserTypeFunction
            
        - CloudWatchLogsFullAccess

  GetAndSendInvitationStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachines/get-send-invitation.asl.json
      Type: EXPRESS
      DefinitionSubstitutions:
        GetInvitationTemplateFunctionArn : !GetAtt GetInvitationTemplateFunction.Arn
        SendInvitationFunctionArn : !GetAtt SendInvitationFunction.Arn
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt CreateSettingsLogs.Arn
        IncludeExecutionData: true
        Level: ALL  
      Policies: 
        - LambdaInvokePolicy:
            FunctionName: !Ref GetInvitationTemplateFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref SendInvitationFunction
            
        - CloudWatchLogsFullAccess





  ###############      
  ## LOGS      ##
  ###############  
  
  CreateSettingsLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}/createSettings
      RetentionInDays: 3
  
  GetEmailLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}/GetInvitation
      RetentionInDays: 3 
  SendEmailLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}/SendInvitation
      RetentionInDays: 3 
  
  ###############      
  ## S3 Bucket ##
  ############### 
  TemplateBucket:
    Type: AWS::S3::Bucket

  ###############      
  ## DYNAMO DB ##
  ###############  
  DynamoSettingTableSample:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SettingsTableSample
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: sort
          AttributeType: S
        - AttributeName: email
          AttributeType: S       
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: sort
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: email-sort
          KeySchema:
            - AttributeName: email
              KeyType: HASH
            - AttributeName: sort
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

Outputs:
  APIKey:
    Description: API Key
    Value: !GetAtt AppSyncApiKey.ApiKey
  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value: !GetAtt AppSyncApi.GraphQLUrl
  GraphQLApiId:
    Description: The API ID of the GraphQL API
    Value: !GetAtt AppSyncApi.ApiId         