AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  Prueba de CRUD

Resources:
 ###################
 ## AppSync Role  ##
 ###################
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowAccessForAppsyncResolvers
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # - Effect: Allow
              #   Action:
              #     - states:StartSyncExecution
              #   Resource:
              #     - !Ref OrderQuestionsStateMachine
              #     - !Ref CheckAnswers2StateMachine
              #     - !Ref DeleteQuestionStateMachine
              #     - !Ref CreateRequestStateMachine
              #     - !Ref ApproveRequestStateMachine
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !GetAtt DynamoStudentsTable.Arn
                  - !Sub 
                    - "${Table}/index/*"
                    - { Table: !GetAtt DynamoStudentsTable.Arn }
              # - Effect: Allow
              #   Action:
              #   - lambda:invokeFunction
              #   Resource: 
              #     - !GetAtt AnswerCheckFunction.Arn
  
  AppSyncApi:
    DependsOn: AppSyncServiceRole
    Type: AWS::AppSync::GraphQLApi
    Description: "The GraphQL API for the single table App"
    Properties:
      Name: university-appsync
      AuthenticationType: API_KEY

   # API Key for external access
  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties: 
      ApiId: !GetAtt AppSyncApi.ApiId

 # AppSync Schema
  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DefinitionS3Location: "./schema.graphql"

 # AppSync Data Source for DynamoDB
  AppSyncStudentsDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: SingleTableStudentDataSource
      ApiId: !GetAtt AppSyncApi.ApiId
      Description: "The Single Table AppSync Data Source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Ref DynamoStudentsTable
        AwsRegion: !Sub ${AWS::Region}

  # AppSync get all students Resolver
  AppSyncGetAllResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties: 
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getStudents
      DataSourceName: !GetAtt AppSyncStudentsDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2018-05-29",
          "operation": "Query",
          "query": {
              "expression": "id = :id", 
              "expressionValues":	{              
                ":id" : $util.dynamodb.toDynamoDBJson("ESTUDIANTE")
              }
            }
        }
      ResponseMappingTemplate: >
        [
          #foreach($item in $ctx.result.items)
            {
                "sk":$util.toJson($item['sk']),
                "id": $util.toJson($item['id']),
                "name": $util.toJson($item['name'])
            }#if($foreach.hasNext),#end
            #end
        ]
  # AppSync get student Resolver

  AppSyncGetStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties: 
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getStudent
      DataSourceName: !GetAtt AppSyncStudentsDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id),
            "sk": $util.dynamodb.toDynamoDBJson($ctx.args.sk)
          }
        }
      ResponseMappingTemplate: >
        {
          "sk":$util.toJson($ctx.result.sk),
          "id": $util.toJson($ctx.result.id),
          "name": $util.toJson($ctx.result.name)
        }

  # AppSync create student Resolver

  AppSyncCreateStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties: 
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: createStudent
      DataSourceName: !GetAtt AppSyncStudentsDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($context.args.id),
            "sk": $util.dynamodb.toDynamoDBJson($context.args.sk)
          },
          "attributeValues": {
            "name": $util.dynamodb.toDynamoDBJson($context.args.name)
          }
        }
      ResponseMappingTemplate: >
        {
          "sk":$util.toJson($ctx.result.sk),
          "id": $util.toJson($ctx.result.id),
          "name": $util.toJson($ctx.result.name)
        }
  
  # AppSync update student Resolver

  AppSyncUpdateStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties: 
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: updateStudent
      DataSourceName: !GetAtt AppSyncStudentsDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id),
            "sk": $util.dynamodb.toDynamoDBJson($ctx.args.sk)
          },
          "update": {
            "expression": "set #name = :name",
            "expressionNames": {
              "#name": "name"
            },
            "expressionValues": {
             ":name": $util.dynamodb.toDynamoDBJson($ctx.args.name)
            }
          }
        }
      ResponseMappingTemplate: >
        {
          "sk":$util.toJson($ctx.result.sk),
          "id": $util.toJson($ctx.result.id),
          "name": $util.toJson($ctx.result.name)
        }
  
  # AppSync delete student Resolver
  AppSyncDeleteStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties: 
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: deleteStudent
      DataSourceName: !GetAtt AppSyncStudentsDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id),
            "sk": $util.dynamodb.toDynamoDBJson($ctx.args.sk)
          }
        }
      ResponseMappingTemplate: >
        {
          "sk":$util.toJson($ctx.result.sk),
          "id": $util.toJson($ctx.result.id),
          "name": $util.toJson($ctx.result.name)
        }

  # DynamoDB
  DynamoStudentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: StudentsTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: sk
          AttributeType: S        
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

Outputs:
  APIKey:
    Description: API Key
    Value: !GetAtt AppSyncApiKey.ApiKey
  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value: !GetAtt AppSyncApi.GraphQLUrl
  GraphQLApiId:
    Description: The API ID of the GraphQL API
    Value: !GetAtt AppSyncApi.ApiId         