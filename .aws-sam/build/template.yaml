AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Prueba de CRUD

  '
Parameters:
  SENDER:
    Description: Ambiente despliegue
    Type: String
    Default: jose.porres@devmente.com
  Stage:
    Description: Ambiente despliegue
    Type: String
    Default: dev
    AllowedValues:
    - stg
    - prd
    - dev
    - qa
Resources:
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - appsync.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: AllowAccessForAppsyncResolvers
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - states:StartSyncExecution
            Resource:
            - Ref: StoreSettingsStateMachine
            - Ref: GetPracticeStateMachine
            - Ref: PutUpdatePracticeStateMachine
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:UpdateItem
            - dynamodb:Query
            - dynamodb:Scan
            Resource:
            - Fn::GetAtt:
              - DynamoSettingTableSample
              - Arn
            - Fn::Sub:
              - ${Table}/index/*
              - Table:
                  Fn::GetAtt:
                  - DynamoSettingTableSample
                  - Arn
  AppSyncApi:
    DependsOn: AppSyncServiceRole
    Type: AWS::AppSync::GraphQLApi
    Description: The GraphQL API for the single table App
    Properties:
      Name: university-appsync
      AuthenticationType: API_KEY
  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      DefinitionS3Location: ../../schema.graphql
  StepFunctionsHttpDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      Name: StepFunctionsHttpDataSource
      Description: Step Functions HTTP
      Type: HTTP
      ServiceRoleArn:
        Fn::GetAtt:
        - AppSyncServiceRole
        - Arn
      HttpConfig:
        Endpoint:
          Fn::Sub: https://sync-states.${AWS::Region}.amazonaws.com/
        AuthorizationConfig:
          AuthorizationType: AWS_IAM
          AwsIamConfig:
            SigningRegion:
              Ref: AWS::Region
            SigningServiceName: states
  AppSyncDynamoSettingsTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: SettingsTableDataSource
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      Description: Settings table data source
      Type: AMAZON_DYNAMODB
      ServiceRoleArn:
        Fn::GetAtt:
        - AppSyncServiceRole
        - Arn
      DynamoDBConfig:
        TableName:
          Ref: DynamoSettingTableSample
        AwsRegion:
          Fn::Sub: ${AWS::Region}
  CheckEmailUserTypeFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
      SamResourceId: CheckEmailUserTypeFunction
    Properties:
      Handler: handler
      Runtime: go1.x
      Environment:
        Variables:
          REGION:
            Fn::Sub: ${AWS::Region}
          BucketName:
            Ref: TemplateBucket
      Policies:
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName:
            Ref: TemplateBucket
      CodeUri: CheckEmailUserTypeFunction
  StoreSettingsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
      SamResourceId: StoreSettingsFunction
    Properties:
      Handler: handler
      Runtime: go1.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoSettingTableSample
      Environment:
        Variables:
          SETTINGS_TABLE:
            Ref: DynamoSettingTableSample
      CodeUri: StoreSettingsFunction
  GetInvitationTemplateFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
      SamResourceId: GetInvitationTemplateFunction
    Properties:
      Handler: handler
      Runtime: go1.x
      Environment:
        Variables:
          REGION:
            Fn::Sub: ${AWS::Region}
          BucketName:
            Ref: TemplateBucket
      Policies:
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName:
            Ref: TemplateBucket
      CodeUri: GetInvitationTemplateFunction
  SendInvitationFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
      SamResourceId: SendInvitationFunction
    Properties:
      Handler: handler
      Runtime: go1.x
      Environment:
        Variables:
          REGION:
            Fn::Sub: ${AWS::Region}
          SENDER:
            Ref: SENDER
      Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
        - Sid: SESPolicy
          Effect: Allow
          Action:
          - ses:SendEmail
          Resource: '*'
      CodeUri: SendInvitationFunction
  CreateAppsProcessFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
      SamResourceId: CreateAppsProcessFunction
    Properties:
      Handler: handler
      Runtime: go1.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoSettingTableSample
      Environment:
        Variables:
          TABLA_NAME:
            Ref: DynamoSettingTableSample
          Stage:
            Ref: Stage
      CodeUri: CreateAppsProcessFunction
  StoreSettingsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Mutation
      FieldName: storeSettings
      DataSourceName:
        Fn::GetAtt:
        - StepFunctionsHttpDataSource
        - Name
      RequestMappingTemplate:
        Fn::Sub: "{\n  \"version\": \"2018-05-29\",\n  \"method\": \"POST\",\n  \"\
          resourcePath\": \"/\",\n  \"params\": {\n    \"headers\": {\n      \"content-type\"\
          : \"application/x-amz-json-1.0\",\n      \"x-amz-target\":\"AWSStepFunctions.StartSyncExecution\"\
          \n    },\n    \"body\": {\n      \"stateMachineArn\": \"${StoreSettingsStateMachine}\"\
          ,\n      \"input\": \"{ \\\"settings\\\": $util.escapeJavaScript($util.toJson($ctx.args.settings))}\"\
          \n    }\n  }\n}\n"
      ResponseMappingTemplate: $ctx.result.body
  StoreSettingsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ../../statemachines/storeSettings.asl.json
      Type: EXPRESS
      DefinitionSubstitutions:
        DDBQuery: arn:aws:states:::aws-sdk:dynamodb:query
        DDBUpdateItem: arn:aws:states:::dynamodb:updateItem
        CheckEmailUserTypeFunctionArn:
          Fn::GetAtt:
          - CheckEmailUserTypeFunction
          - Arn
        StoreSettingsFunctionArn:
          Fn::GetAtt:
          - StoreSettingsFunction
          - Arn
        GetInvitationTemplateFunctionArn:
          Fn::GetAtt:
          - GetInvitationTemplateFunction
          - Arn
        SendInvitationFunctionArn:
          Fn::GetAtt:
          - SendInvitationFunction
          - Arn
        GetAndSendInvitationStateMachineArn:
          Fn::GetAtt:
          - GetAndSendInvitationStateMachine
          - Arn
        TableName:
          Ref: DynamoSettingTableSample
      Logging:
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn:
              Fn::GetAtt:
              - CreateSettingsLogs
              - Arn
        IncludeExecutionData: true
        Level: ALL
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoSettingTableSample
      - LambdaInvokePolicy:
          FunctionName:
            Ref: StoreSettingsFunction
      - StepFunctionsExecutionPolicy:
          StateMachineName:
            Fn::GetAtt:
            - GetAndSendInvitationStateMachine
            - Name
      - LambdaInvokePolicy:
          FunctionName:
            Ref: CheckEmailUserTypeFunction
      - CloudWatchLogsFullAccess
  GetAndSendInvitationStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ../../statemachines/get-send-invitation.asl.json
      Type: EXPRESS
      DefinitionSubstitutions:
        GetInvitationTemplateFunctionArn:
          Fn::GetAtt:
          - GetInvitationTemplateFunction
          - Arn
        SendInvitationFunctionArn:
          Fn::GetAtt:
          - SendInvitationFunction
          - Arn
      Logging:
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn:
              Fn::GetAtt:
              - CreateSettingsLogs
              - Arn
        IncludeExecutionData: true
        Level: ALL
      Policies:
      - LambdaInvokePolicy:
          FunctionName:
            Ref: GetInvitationTemplateFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: SendInvitationFunction
      - CloudWatchLogsFullAccess
  GetPracticeFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
      SamResourceId: GetPracticeFunction
    Properties:
      Handler: handler
      Runtime: go1.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoSettingTableSample
      Environment:
        Variables:
          TABLENAME:
            Ref: DynamoSettingTableSample
      CodeUri: GetPracticeFunction
  GetAppResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Query
      FieldName: getApp
      DataSourceName:
        Fn::GetAtt:
        - StepFunctionsHttpDataSource
        - Name
      RequestMappingTemplate:
        Fn::Sub: "{\n  \"version\": \"2018-05-29\",\n  \"method\": \"POST\",\n  \"\
          resourcePath\": \"/\",\n  \"params\": {\n    \"headers\": {\n      \"content-type\"\
          : \"application/x-amz-json-1.0\",\n      \"x-amz-target\":\"AWSStepFunctions.StartSyncExecution\"\
          \n    },\n    \"body\": {\n      \"stateMachineArn\": \"${GetPracticeStateMachine}\"\
          ,\n      \"input\": \"{ \\\"id\\\": $util.escapeJavaScript($util.toJson($ctx.args.app.id)),\
          \ \\\"sort\\\": $util.escapeJavaScript($util.toJson($ctx.args.app.sort))}\"\
          \n    }\n  }\n}\n"
      ResponseMappingTemplate: $util.parseJson($ctx.result.body).output
  GetPracticeStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ../../statemachines/getPractice.asl.json
      Type: EXPRESS
      DefinitionSubstitutions:
        GetPracticeFunctionArn:
          Fn::GetAtt:
          - GetPracticeFunction
          - Arn
      Logging:
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn:
              Fn::GetAtt:
              - CreateSettingsLogs
              - Arn
        IncludeExecutionData: true
        Level: ALL
      Policies:
      - LambdaInvokePolicy:
          FunctionName:
            Ref: GetPracticeFunction
      - CloudWatchLogsFullAccess
  PutUpdatePracticeResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Mutation
      FieldName: putUpdatePractice
      DataSourceName:
        Fn::GetAtt:
        - StepFunctionsHttpDataSource
        - Name
      RequestMappingTemplate:
        Fn::Sub: "{\n  \"version\": \"2018-05-29\",\n  \"method\": \"POST\",\n  \"\
          resourcePath\": \"/\",\n  \"params\": {\n    \"headers\": {\n      \"content-type\"\
          : \"application/x-amz-json-1.0\",\n      \"x-amz-target\":\"AWSStepFunctions.StartSyncExecution\"\
          \n    },\n    \"body\": {\n      \"stateMachineArn\": \"${PutUpdatePracticeStateMachine}\"\
          ,\n      \"input\": \"{ \\\"id\\\": $util.escapeJavaScript($util.toJson($ctx.args.id)),\
          \ \\\"sort\\\": $util.escapeJavaScript($util.toJson($ctx.args.sort)), \\\
          \"nombre\\\": $util.escapeJavaScript($util.toJson($ctx.args.nombre))}\"\n\
          \    }\n  }\n}\n"
      ResponseMappingTemplate: $ctx.result.body
  PutUpdatePracticeFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
      SamResourceId: PutUpdatePracticeFunction
    Properties:
      Handler: handler
      Runtime: go1.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoSettingTableSample
      Environment:
        Variables:
          TABLENAME:
            Ref: DynamoSettingTableSample
      CodeUri: PutUpdatePracticeFunction
  PutUpdatePracticeStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ../../statemachines/putUpdatePractice.asl.json
      Type: EXPRESS
      DefinitionSubstitutions:
        PutUpdatePracticeFunctionArn:
          Fn::GetAtt:
          - PutUpdatePracticeFunction
          - Arn
      Logging:
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn:
              Fn::GetAtt:
              - CreateSettingsLogs
              - Arn
        IncludeExecutionData: true
        Level: ALL
      Policies:
      - LambdaInvokePolicy:
          FunctionName:
            Ref: PutUpdatePracticeFunction
      - CloudWatchLogsFullAccess
  CreateSettingsLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/vendedlogs/states/${AWS::StackName}/createSettings
      RetentionInDays: 3
  GetEmailLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/vendedlogs/states/${AWS::StackName}/GetInvitation
      RetentionInDays: 3
  SendEmailLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/vendedlogs/states/${AWS::StackName}/SendInvitation
      RetentionInDays: 3
  TemplateBucket:
    Type: AWS::S3::Bucket
  DynamoSettingTableSample:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SettingsTableSample
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      - AttributeName: sort
        AttributeType: S
      - AttributeName: email
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      - AttributeName: sort
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
      - IndexName: email-sort
        KeySchema:
        - AttributeName: email
          KeyType: HASH
        - AttributeName: sort
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      - IndexName: list-users
        KeySchema:
        - AttributeName: sort
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
Outputs:
  APIKey:
    Description: API Key
    Value:
      Fn::GetAtt:
      - AppSyncApiKey
      - ApiKey
  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value:
      Fn::GetAtt:
      - AppSyncApi
      - GraphQLUrl
  GraphQLApiId:
    Description: The API ID of the GraphQL API
    Value:
      Fn::GetAtt:
      - AppSyncApi
      - ApiId
